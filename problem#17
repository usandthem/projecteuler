{
 "metadata": {
  "name": "",
  "signature": "sha256:8d4b46a0927f977f107a0733b7d083159f59f6d5ad7d4cf1ae44db432a1be1da"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Project Euler #17"
     ]
    },
    {
     "cell_type": "raw",
     "metadata": {},
     "source": [
      "If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.\n",
      "\n",
      "If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?\n",
      "\n",
      "NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of \"and\" when writing out numbers is in compliance with British usage."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "my_number_to_word_Dict = {1: \"one\"\n",
      "                       ,2: \"two\"\n",
      "                       ,3: \"three\"\n",
      "                       ,4: \"four\"\n",
      "                       ,5: \"five\"\n",
      "                       ,6: \"six\"\n",
      "                       ,7:\"seven\"\n",
      "                       ,8:\"eight\"\n",
      "                       ,9:\"nine\"\n",
      "                       ,10:\"ten\"\n",
      "                       ,11:'eleven'\n",
      "                       ,12:'twelve'\n",
      "                       ,13:'thirteen'\n",
      "                       ,14:'fourteen'\n",
      "                       ,15:'fifteen'\n",
      "                       ,16:'sixteen'\n",
      "                       ,17:'seventeen'\n",
      "                       ,18:'eighteen'\n",
      "                       ,19:'ninteen'\n",
      "                       ,20:'twenty'\n",
      "                       ,30:'thirty'\n",
      "                       ,40:'fourty'\n",
      "                       ,50:'fifty'\n",
      "                       ,60:'sixty'\n",
      "                       ,70:'seventy'\n",
      "                       ,80:'eighty'\n",
      "                       ,90:'ninty'\n",
      "                       ,100:'one hundred'\n",
      "                       ,200:'two hundred'\n",
      "                       ,300:'three hundred'\n",
      "                       ,400:'four hundred'\n",
      "                       ,500:'five hundred'\n",
      "                       ,600:'six hundred'\n",
      "                       ,700:'seven hundred'\n",
      "                       ,800:'eight hundred'\n",
      "                       ,900:'nine hundred'\n",
      "                       ,1000:'one thousand'}"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def intToString_number(word):\n",
      "    wordStr = ''\n",
      "    i = 0\n",
      "    while word > 0:\n",
      "        if word < 20:\n",
      "            if i == 0:\n",
      "                addWord = my_number_to_word_Dict[word]\n",
      "                wordStr = wordStr +' ' + addWord\n",
      "                word = -1\n",
      "                break\n",
      "            else:\n",
      "                addWord = my_number_to_word_Dict[word]\n",
      "                wordStr = wordStr +' ' + addWord\n",
      "                word = -1\n",
      "                break\n",
      "        elif word <30:\n",
      "            addWord = my_number_to_word_Dict[20]\n",
      "            wordStr = wordStr + ' ' + addWord\n",
      "            word = word - 20\n",
      "\n",
      "        elif word <40:\n",
      "            addWord = my_number_to_word_Dict[30]\n",
      "            wordStr = wordStr + ' ' + addWord\n",
      "            word = word - 30\n",
      "\n",
      "        elif word <50:\n",
      "            addWord = my_number_to_word_Dict[40]\n",
      "            wordStr = wordStr + ' ' + addWord\n",
      "            word = word - 40\n",
      "\n",
      "        elif word <60:\n",
      "            addWord = my_number_to_word_Dict[50]\n",
      "            wordStr = wordStr + ' ' + addWord\n",
      "            word = word - 50\n",
      "\n",
      "        elif word <70:\n",
      "            addWord = my_number_to_word_Dict[60]\n",
      "            wordStr = wordStr + ' ' + addWord\n",
      "            word = word - 60\n",
      "\n",
      "        elif word <80:\n",
      "            addWord = my_number_to_word_Dict[70]\n",
      "            wordStr = wordStr + ' ' + addWord\n",
      "            word = word - 70\n",
      "\n",
      "        elif word <90:\n",
      "            addWord = my_number_to_word_Dict[80]\n",
      "            wordStr = wordStr + ' ' + addWord\n",
      "            word = word - 80\n",
      "\n",
      "        elif word <100:\n",
      "            addWord = my_number_to_word_Dict[90]\n",
      "            wordStr = wordStr + ' ' + addWord\n",
      "            word = word - 90\n",
      "\n",
      "        elif word <200:\n",
      "            addWord = my_number_to_word_Dict[100]\n",
      "            wordStr = wordStr + ' ' + addWord\n",
      "            word = word - 100\n",
      "            i += 1\n",
      "        elif word <300:\n",
      "            addWord = my_number_to_word_Dict[200]\n",
      "            wordStr = wordStr + ' ' + addWord\n",
      "            word = word - 200\n",
      "            i += 1\n",
      "        elif word <400:\n",
      "            addWord = my_number_to_word_Dict[300]\n",
      "            wordStr = wordStr + ' ' + addWord\n",
      "            word = word - 300\n",
      "            i += 1\n",
      "        elif word <500:\n",
      "            addWord = my_number_to_word_Dict[400]\n",
      "            wordStr = wordStr + ' ' + addWord\n",
      "            word = word - 400\n",
      "            i += 1\n",
      "        elif word <600:\n",
      "            addWord = my_number_to_word_Dict[500]\n",
      "            wordStr = wordStr + ' ' + addWord\n",
      "            word = word - 500\n",
      "            i += 1\n",
      "        elif word <700:\n",
      "            addWord = my_number_to_word_Dict[600]\n",
      "            wordStr = wordStr + ' ' + addWord\n",
      "            word = word - 600\n",
      "            i += 1\n",
      "        elif word <800:\n",
      "            addWord = my_number_to_word_Dict[700]\n",
      "            wordStr = wordStr + ' ' + addWord\n",
      "            word = word - 700\n",
      "            i += 1\n",
      "        elif word <900:\n",
      "            addWord = my_number_to_word_Dict[800]\n",
      "            wordStr = wordStr + ' ' + addWord\n",
      "            word = word - 800\n",
      "            i += 1\n",
      "        elif word <1000:\n",
      "            addWord = my_number_to_word_Dict[900]\n",
      "            wordStr = wordStr + ' ' + addWord\n",
      "            word = word - 900\n",
      "            i += 1\n",
      "        elif word == 1000:\n",
      "            addWord = my_number_to_word_Dict[1000]\n",
      "            wordStr = addWord\n",
      "            word = -1\n",
      "            i += 1\n",
      "        else:\n",
      "            break \n",
      "    return wordStr \n",
      "\n",
      "def count_letters(word):\n",
      "    BAD_LETTERS = ' '\n",
      "    count = len([letter for letter in word if letter not in BAD_LETTERS])\n",
      "    return count "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 60
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import time\n",
      "totalcount = 0\n",
      "start = time.time()\n",
      "for i in range(0,1000):\n",
      "    temp = intToString_number(i)    \n",
      "    count = count_letters(temp)\n",
      "    totalcount += count \n",
      "    #print i, temp, count, totalcount \n",
      "end = time.time() - start \n",
      "print totalcount, end\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "18430 0.0236859321594\n"
       ]
      }
     ],
     "prompt_number": 63
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "i = 115\n",
      "word = intToString_number(i)\n",
      "count = count_letters(word)\n",
      "print i, word, count "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "115  and one hundred fifteen 20\n"
       ]
      }
     ],
     "prompt_number": 59
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}
